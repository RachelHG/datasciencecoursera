
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.65 (6833) x86_64-apple-darwin13.4.0]

[History restored from /Users/alongur/.Rapp.history]

> install_from_swirl("R Programming")
Error: could not find function "install_from_swirl"
> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before, use the same name as you did then. If you are new, call yourself
| something unique.

What shall I call you? Rachel

| To begin, you must install a course. I can install a course for you from the internet, or I can send you to a web
| page (https://github.com/swirldev/swirl_courses) which will provide course options and directions for installing
| courses yourself. (If you are not connected to the internet, type 0 to exit.)

1: R Programming: The basics of programming in R
2: Regression Models: The basics of regression modeling in R
3: Don't install anything for me. I'll do it myself.

Selection: 1

| Course installed successfully!


| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 1
  |                                                                                                          |   0%

| In this lesson, we will explore some basic building blocks of the R programming language.

...
  |===                                                                                                       |   3%
| If at any point you'd like more information on a particular topic related to R, you can type help.start() at the
| prompt, which will open a menu of resources (either within RStudio or your default web browser, depending on your
| setup). Alternatively, a simple web search often yields the answer you're looking for.

...
  |======                                                                                                    |   5%
| In its simplest form, R can be used as an interactive calculator. Type 5 + 7 and press Enter.

> 5+7
[1] 12

| You got it right!
  |=========                                                                                                 |   8%
| R simply prints the result of 12 by default. However, R is a programming language and often the reason we use a
| programming language as opposed to a calculator is to automate some process or avoid unnecessary repetition.

...
  |===========                                                                                               |  11%
| In this case, we may want to use our result from above in a second calculation. Instead of retyping 5 + 7 every
| time we need it, we can just create a new variable that stores the result.

...
  |==============                                                                                            |  14%
| The way you assign a value to a variable in R is by using the assignment operator, which is just a 'less than'
| symbol followed by a 'minus' sign. It looks like this: <-

...
  |=================                                                                                         |  16%
| Think of the assignment operator as an arrow. You are assigning the value on the right side of the arrow to the
| variable name on the left side of the arrow.

...
  |====================                                                                                      |  19%
| To assign the result of 5 + 7 to a new variable called x, you type x <- 5 + 7. This can be read as 'x gets 5 plus
| 7'. Give it a try now.

> x <- 5+7

| Keep up the great work!
  |=======================                                                                                   |  22%
| You'll notice that R did not print the result of 12 this time. When you use the assignment operator, R assumes
| that you don't want to see the result immediately, but rather that you intend to use the result for something
| else later on.

...
  |==========================                                                                                |  24%
| To view the contents of the variable x, just type x and press Enter. Try it now.

> x
[1] 12

| Keep up the great work!
  |=============================                                                                             |  27%
| Now, store the result of x - 3 in a new variable called y.

> y <- x-3

| That's correct!
  |================================                                                                          |  30%
| What is the value of y? Type y to find out.

> y
[1] 9

| You got it right!
  |==================================                                                                        |  32%
| Now, let's create a small collection of numbers called a vector. Any object that contains data is called a data
| structure and numeric vectors are the simplest type of data structure in R. In fact, even a single number is
| considered a vector of length one.

...
  |=====================================                                                                     |  35%
| The easiest way to create a vector is with the c() function, which stands for 'concatenate' or 'combine'. To
| create a vector containing the numbers 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in
| a variable called z.

> z <- c(1.1, 9, 3.14)

| That's correct!
  |========================================                                                                  |  38%
| Anytime you have questions about a particular function, you can access R's built-in help files via the `?`
| command. For example, if you want more information on the c() function, type ?c without the parentheses that
| normally follow a function name. Give it a try.

> ?c
starting httpd help server ... done

| Excellent job!
  |===========================================                                                               |  41%
| Type z to view its contents. Notice that there are no commas separating the values in the output.

> z
[1] 1.10 9.00 3.14

| You nailed it! Good job!
  |==============================================                                                            |  43%
| You can combine vectors to make a new vector. Create a new vector that contains z, 555, then z again in that
| order. Don't assign this vector to a new variable, so that we can just see the result immediately.

> z <- c(z, 555, z)

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| Type c(z, 555, z). Don't create a new variable. We just want to view the result.

> c(z, 555, z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14

| You got it!
  |=================================================                                                         |  46%
| Numeric vectors can be used in arithmetic expressions. Type the following to see what happens: z * 2 + 100.

> z * 2 + 100
[1] 102.20 118.00 106.28

| That's a job well done!
  |====================================================                                                      |  49%
| First, R multiplied each of the three elements in z by 2. Then it added 100 to each element to get the result you
| see above.

...
  |======================================================                                                    |  51%
| Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2 means 'x squared'). To take the square
| root, use the sqrt() function and to take the absolute value, use the abs() function.

...
  |=========================================================                                                 |  54%
| Take the square root of z - 1 and assign it to a new variable called my_sqrt.

> my_sqrt <- sqrt(z-1)

| You are doing so well!
  |============================================================                                              |  57%
| Before we view the contents of the my_sqrt variable, what do you think it contains?

1: a vector of length 3
2: a single number (i.e a vector of length 1)
3: a vector of length 0 (i.e. an empty vector)

Selection: 1

| Perseverance, that's the answer.
  |===============================================================                                           |  59%
| Print the contents of my_sqrt.

> my_sqrt
[1] 0.3162278 2.8284271 1.4628739

| All that hard work is paying off!
  |==================================================================                                        |  62%
| As you may have guessed, R first subtracted 1 from each element of z, then took the square root of each element.
| This leaves you with a vector of the same length as the original vector z.

...
  |=====================================================================                                     |  65%
| Now, create a new variable called my_div that gets the value of z divided by my_sqrt.

> my_div <- z/my_sqrt

| Perseverance, that's the answer.
  |========================================================================                                  |  68%
| Which statement do you think is true?

1: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...
2: my_div is a single number (i.e a vector of length 1)
3: my_div is undefined

Selection: 1

| Perseverance, that's the answer.
  |==========================================================================                                |  70%
| Go ahead and print the contents of my_div.

> my_div
[1] 3.478505 3.181981 2.146460

| That's a job well done!
  |=============================================================================                             |  73%
| When given two vectors of the same length, R simply performs the specified arithmetic operation (`+`, `-`, `*`,
| etc.) element-by-element. If the vectors are of different lengths, R 'recycles' the shorter vector until it is
| the same length as the longer vector.

...
  |================================================================================                          |  76%
| When we did z * 2 + 100 in our earlier example, z was a vector of length 3, but technically 2 and 100 are each
| vectors of length 1.

...
  |===================================================================================                       |  78%
| Behind the scenes, R is 'recycling' the 2 to make a vector of 2s and the 100 to make a vector of 100s. In other
| words, when you ask R to compute z * 2 + 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100).

...
  |======================================================================================                    |  81%
| To see another example of how this vector 'recycling' works, try adding c(1, 2, 3, 4) and c(0, 10). Don't worry
| about saving the result in a new variable.

> c(1, 2, 3, 4) + c(0, 10)
[1]  1 12  3 14

| Keep working like that and you'll get there!
  |=========================================================================================                 |  84%
| If the length of the shorter vector does not divide evenly into the length of the longer vector, R will still
| apply the 'recycling' method, but will throw a warning to let you know something fishy might be going on.

...
  |============================================================================================              |  86%
| Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length

| That's a job well done!
  |===============================================================================================           |  89%
| Before concluding this lesson, I'd like to show you a couple of time-saving tricks.

...
  |=================================================================================================         |  92%
| Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a mistake and that you meant to add
| 1000 instead of 100. You could either re-type the expression, or...

...
  |====================================================================================================      |  95%
| In many programming environments, the up arrow will cycle through previous commands. Try hitting the up arrow on
| your keyboard until you get to this command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up arrow
| doesn't work for you, just type the corrected command.

> z * 2 + 1000
[1] 1002.20 1018.00 1006.28

| Excellent job!
  |=======================================================================================================   |  97%
| Finally, let's pretend you'd like to view the contents of a variable that you created earlier, but you can't seem
| to remember if you named it my_div or myDiv. You could try both and see what works, or...

...
  |==========================================================================================================| 100%
| You can type the first two letters of the variable name, then hit the Tab key (possibly more than once). Most
| programming environments will provide a list of variables that you've created that begin with 'my'. This is
| called auto-completion and can be quite handy when you have many variables in your workspace. Give it a try. (If
| auto-completion doesn't work for you, just type my_div and press Enter.)

> my_div
[1] 3.478505 3.181981 2.146460

| Your dedication is inspiring!

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more info
| from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your Course ID. For example, if the homepage for your Coursera course was
| 'https://class.coursera.org/rprog-001', then your course ID would be 'rprog-001' (without the quotes).

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf 

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Basic_Building_Blocks.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 2
  |                                                                                                          |   0%

| In this lesson, you'll learn how to examine your local workspace in R and begin to explore the relationship
| between your workspace and the file system of your machine.

...
  |===                                                                                                       |   2%
| Because different operating systems have different conventions with regards to things like file paths, the
| outputs of these commands may vary across machines.

...
  |=====                                                                                                     |   5%
| However it's important to note that R provides a common API (a common set of commands) for interacting
| with files, that way your code will work across different kinds of computers.

...
  |========                                                                                                  |   7%
| Let's jump right in so you can get a feel for how these special functions work!

...
  |==========                                                                                                |  10%
| Determine which directory your R session is using as its current working directory using getwd().

> getwd()
[1] "/Users/alongur"

| You nailed it! Good job!
  |=============                                                                                             |  12%
| List all the objects in your local workspace using ls().

> ls()
[1] "my_div"  "my_sqrt" "x"       "y"       "z"      

| You are doing so well!
  |================                                                                                          |  15%
| Some R commands are the same as their equivalents commands on Linux or on a Mac. Both Linux and Mac
| operating systems are based on an operating system called Unix. It's always a good idea to learn more
| about Unix!

...
  |==================                                                                                        |  17%
| Assign 9 to x using x <- 9.

> x <- 9

| You got it!
  |=====================                                                                                     |  20%
| Now take a look at objects that are in your workspace using ls().

> ls()
[1] "my_div"  "my_sqrt" "x"       "y"       "z"      

| You are doing so well!
  |=======================                                                                                   |  22%
| List all the files in your working directory using list.files() or dir().

> list.files()
 [1] "ActiveGSLocalData"        "Applications"             "Applications (Parallels)"
 [4] "Coursera"                 "Creative Cloud Files"     "datasciencecoursera"     
 [7] "Desktop"                  "Documents"                "Downloads"               
[10] "Dropbox"                  "Dropbox (Old)"            "dwhelper"                
[13] "Google Drive"             "Images"                   "Library"                 
[16] "Movies"                   "Music"                    "Pictures"                
[19] "Public"                   "Sites"                    "specdata"                
[22] "test-repo"               

| Excellent job!
  |==========================                                                                                |  24%
| As we go through this lesson, you should be examining the help page for each new function. Check out the
| help page for list.files with the command ?list.files.

> ?list.files

| Excellent job!
  |============================                                                                              |  27%
| One of the most helpful parts of any R help file is the See Also section. Read that section for
| list.files. Some of these functions may be used in later portions of this lesson.

...
  |===============================                                                                           |  29%
| Using the args() function on a function name is also a handy way to see what arguments a function can
| take.

...
  |==================================                                                                        |  32%
| Use the args() function to determine the arguments to list.files().

> args()
Error in args() : argument "name" is missing, with no default
> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
    recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
    no.. = FALSE) 
NULL

| That's the answer I was looking for.
  |====================================                                                                      |  34%
| Assign the value of the current working directory to a variable called "old.dir".

> old.dir <- args(list.files)

| Almost! Try again. Or, type info() for more options.

| Type old.dir <- getwd() to assign the value of the current working directory to a variable called
| "old.dir".

> old.dir <- getwd()

| Perseverance, that's the answer.
  |=======================================                                                                   |  37%
| We will use old.dir at the end of this lesson to move back to the place that we started. A lot of query
| functions like getwd() have the useful property that they return the answer to the question as a result of
| the function.

...
  |=========================================                                                                 |  39%
| Use dir.create() to create a directory in the current working directory called "testdir".

> testdir <- dir.create()
Error in dir.create() : argument "path" is missing, with no default
> testdir <- dir.create(getwd())
Warning message:
In dir.create(getwd()) : '/Users/alongur' already exists

| Keep trying! Or, type info() for more options.

| Type dir.create("testdir") to create a directory in the current working directory called "testdir".

> dir.create("testdir")

| All that hard work is paying off!
  |============================================                                                              |  41%
| We will do all our work in this new directory and then delete it after we are done. This is the R analog
| to "Take only pictures, leave only footprints."

...
  |===============================================                                                           |  44%
| Set your working directory to "testdir" with the setwd() command.

> setwd(testdir)
Error in setwd(testdir) : character argument expected
> setwd("testdir")

| You're the best!
  |=================================================                                                         |  46%
| In general, you will want your working directory to be someplace sensible, perhaps created for the
| specific project that you are working on. In fact, organizing your work in R packages using RStudio is an
| excellent option. Check out RStudio at http://www.rstudio.com/

...
  |====================================================                                                      |  49%
| Create a file in your working directory called "mytest.R" using the file.create() function.

> file.create("mytest.R")
[1] TRUE

| Great job!
  |======================================================                                                    |  51%
| This should be the only file in this newly created directory. Let's check this by listing all the files in
| the current directory.

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "testdir" "x"       "y"       "z"      

| That's not the answer I was looking for, but try again. Or, type info() for more options.

| list.files() shows that the directory only contains mytest.R.

> list.files()
[1] "mytest.R"

| Your dedication is inspiring!
  |=========================================================                                                 |  54%
| Check to see if "mytest.R" exists in the working directory using the file.exists() function.

> file.exists("mytest.R")
[1] TRUE

| All that hard work is paying off!
  |===========================================================                                               |  56%
| These sorts of functions are excessive for interactive use. But, if you are running a program that loops
| through a series of files and does some processing on each one, you will want to check to see that each
| exists before you try to process it.

...
  |==============================================================                                            |  59%
| Access information about the file "mytest.R" by using file.info().

> file.info("mytest.R")
         size isdir mode               mtime               ctime               atime uid gid   uname grname
mytest.R    0 FALSE  644 2015-04-21 01:13:26 2015-04-21 01:13:26 2015-04-21 01:13:26 501  20 alongur  staff

| You are doing so well!
  |=================================================================                                         |  61%
| You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab specific items.

...
  |===================================================================                                       |  63%
| Change the name of the file "mytest.R" to "mytest2.R" by using file.rename().

> mytest2.R <- file.rename("mytest.R")
Error in file.rename("mytest.R") : 
  argument "to" is missing, with no default
> mytest2.R <- file.rename("mytest.R" to "my.test2.R")
Error: unexpected symbol in "mytest2.R <- file.rename("mytest.R" to"
> file.rename("mytest.R" to "my.test2.R")
Error: unexpected symbol in "file.rename("mytest.R" to"
> ?file.remane
No documentation for ‘file.remane’ in specified packages and libraries:
you could try ‘??file.remane’
> ?file.rename
> file.rename(mytest.R, mytest2.R)
Error in file.rename(mytest.R, mytest2.R) : object 'mytest.R' not found
> ?file.rename
> file.rename("mytest.R", "mytest2.R")
[1] TRUE

| All that practice is paying off!
  |======================================================================                                    |  66%
| Your operating system will provide simpler tools for these sorts of tasks, but having the ability to
| manipulate files programatically is useful. You might now try to delete mytest.R using
| file.remove('mytest.R'), but that won't work since mytest.R no longer exists. You have already renamed it.

...
  |========================================================================                                  |  68%
| Make a copy of "mytest2.R" called "mytest3.R" using file.copy().

> ?file.copy
> file.copy("mytest2.R", "mytest3.R")
[1] TRUE

| Keep up the great work!
  |===========================================================================                               |  71%
| You now have two files in the current directory. That may not seem very interesting. But what if you were
| working with dozens, or millions, of individual files? In that case, being able to programatically act on
| many files would be absolutely necessary. Don't forget that you can, temporarily, leave the lesson by
| typing play() and then return by typing nxt().

...
  |==============================================================================                            |  73%
| Provide the relative path to the file "mytest3.R" by using file.path().

> file.path("mytest3.R")
[1] "mytest3.R"

| That's a job well done!
  |================================================================================                          |  76%
| You can use file.path to construct file and directory paths that are independent of the operating system
| your R code is running on. Pass 'folder1' and 'folder2' as arguments to file.path to make a
| platform-independent pathname.

> file.path("folder1")
[1] "folder1"

| Not quite, but you're learning! Try again. Or, type info() for more options.

| file.path("folder1", "folder2") works.

> file.path("folder1", "folder2")
[1] "folder1/folder2"

| That's the answer I was looking for.
  |===================================================================================                       |  78%
| Take a look at the documentation for dir.create by entering ?dir.create . Notice the 'recursive' argument.
| In order to create nested directories, 'recursive' must be set to TRUE.

> ?dir.create

| That's the answer I was looking for.
  |=====================================================================================                     |  80%
| Create a directory in the current working directory called "testdir2" and a subdirectory for it called
| "testdir3", all in one command by using dir.create() and file.path().

> dir.create("testdir2") file.path("testdir3")
Error: unexpected symbol in "dir.create("testdir2") file.path"
> dir.create("testdir2"), file.path("testdir3")
Error: unexpected ',' in "dir.create("testdir2"),"
> dir.create("testdir2") file.path("testdir2","testdir3")
Error: unexpected symbol in "dir.create("testdir2") file.path"
> ?dir.create
> dir.create("testdir2")

| One more time. You can do it! Or, type info() for more options.

| dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do the trick. If you forgot the
| recursive argument, the command may have appeared to work, but it didn't create the nested directory.

> dir.create(file.path("testdir2", "testdir3"))

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do the trick. If you forgot the
| recursive argument, the command may have appeared to work, but it didn't create the nested directory.

> dir.create(file.path('testdir2', 'testdir3'))
Warning message:
In dir.create(file.path("testdir2", "testdir3")) :
  'testdir2/testdir3' already exists

| That's not the answer I was looking for, but try again. Or, type info() for more options.

| dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do the trick. If you forgot the
| recursive argument, the command may have appeared to work, but it didn't create the nested directory.

> dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
Warning message:
In dir.create(file.path("testdir2", "testdir3"), recursive = TRUE) :
  'testdir2/testdir3' already exists

| Nice work!
  |========================================================================================                  |  83%
| To delete a directory you need to use the recursive = TRUE argument with the function unlink(). If you
| don't use recursive = TRUE, R is concerned that you're unaware that you're deleting a directory and all of
| its contents. R reasons that, if you don't specify that recursive equals TRUE, you don't know that
| something is in the directory you're trying to delete. R tries to prevent you from making a mistake.

...
  |==========================================================================================                |  85%
| Delete the "testdir2" directory that you created by using unlink().

> unlink('testdir2', recursive = TRUE)

| Perseverance, that's the answer.
  |=============================================================================================             |  88%
| Why is this command named "unlink" rather than something more sensible like "dir.delete" or "dir.remove"?
| Mainly, history. unlink is the traditional Unix command for removing directories.

...
  |================================================================================================          |  90%
| Go back to your original working directory using setwd(). (Recall that we created the variable old.dir
| with the full path for the orginal working directory at the start of these questions.)

> setwd()
Error in setwd() : argument "dir" is missing, with no default
> setwd(old.dir)

| Excellent job!
  |==================================================================================================        |  93%
| It is often helpful to save the settings that you had before you began an analysis and then go back to
| them at the end. This trick is often used within functions; you save, say, the par() settings that you
| started with, mess around a bunch, and then set them back to the original values at the end. This isn't
| the same as what we have done here, but it seems similar enough to mention.

...
  |=====================================================================================================     |  95%
| Delete the 'testdir' directory that you just left (and everything in it)

> unlink('testdir', recursive=TRUE)

| You are amazing!
  |=======================================================================================================   |  98%
| Take nothing but results. Leave nothing but assumptions. That sounds like 'Take nothing but pictures.
| Leave nothing but footprints.' But it makes no sense! Surely our readers can come up with a better motto .
| . .

...
  |==========================================================================================================| 100%
| In this lesson, you learned how to examine your R workspace and work with the file system of your machine
| from within R. Thanks for playing!

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more
| info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Workspace_and_Files.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 3
  |                                                                                                   |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...
  |====                                                                                               |   5%
| The simplest way to create a sequence of numbers in R is by using the `:` operator. Type 1:20 to see how
| it works.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Keep up the great work!
  |=========                                                                                          |   9%
| That gave us every integer between (and including) 1 and 20. We could also use it to create a sequence of
| real numbers. For example, try pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| Perseverance, that's the answer.
  |=============                                                                                      |  14%
| The result is a vector of real numbers starting with pi (3.142...) and increasing in increments of 1. The
| upper limit of 10 is never reached, since the next number in our sequence would be greater than 10.

...
  |==================                                                                                 |  18%
| What happens if we do 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| You are really on a roll!
  |=======================                                                                            |  23%
| It counted backwards in increments of 1! It's unlikely we'd want this behavior, but nonetheless it's good
| to know how it could happen.

...
  |===========================                                                                        |  27%
| Remember that if you have questions about a particular R function, you can access its documentation with a
| question mark followed by the function name: ?function_name_here. However, in the case of an operator like
| the colon used above, you must enclose the symbol in backticks like this: ?`:`. (NOTE: The backtick (`)
| key is generally located in the top left corner of a keyboard, above the Tab key. If you don't have a
| backtick key, you can use regular quotes.)

...
  |================================                                                                   |  32%
| Pull up the documentation for `:` now.

> ?':'

| Your dedication is inspiring!
  |====================================                                                               |  36%
| Often, we'll desire more control over a sequence we're creating than what the `:` operator gives us. The
| seq() function serves this purpose.

...
  |========================================                                                           |  41%
| The most basic use of seq() does exactly the same thing as the `:` operator. Try seq(1, 20) to see this.

> seq(1,20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are amazing!
  |=============================================                                                      |  45%
| This gives us the same output as 1:20. However, let's say that instead we want a vector of numbers ranging
| from 0 to 10, incremented by 0.5. seq(0, 10, by=0.5) does just that. Try it out.

> seq(0,10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0

| You nailed it! Good job!
  |==================================================                                                 |  50%
| Or maybe we don't care what the increment is and we just want a sequence of 30 numbers between 5 and 10.
| seq(5, 10, length=30) does the trick. Give it a shot now and store the result in a new variable called
| my_seq.

> my_seq <- seq(5,10, length=30)

| Keep up the great work!
  |======================================================                                             |  55%
| To confirm that my_seq has length 30, we can use the length() function. Try it now.

> length(my_seq)
[1] 30

| You are amazing!
  |==========================================================                                         |  59%
| Let's pretend we don't know the length of my_seq, but we want to generate a sequence of integers from 1 to
| N, where N represents the length of the my_seq vector. In other words, we want a new vector (1, 2, 3, ...)
| that is the same length as my_seq.

...
  |===============================================================                                    |  64%
| There are several ways we could do this. One possibility is to combine the `:` operator and the length()
| function like this: 1:length(my_seq). Give that a try.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| That's a job well done!
  |====================================================================                               |  68%
| Another option is to use seq(along.with = my_seq). Give that a try.

> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| That's correct!
  |========================================================================                           |  73%
| However, as is the case with many common tasks, R has a separate built-in function for this purpose called
| seq_along(). Type seq_along(my_seq) to see it in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

| That's correct!
  |============================================================================                       |  77%
| There are often several approaches to solving the same problem, particularly in R. Simple approaches that
| involve less typing are generally best. It's also important for your code to be readable, so that you and
| others can figure out what's going on without too much hassle.

...
  |=================================================================================                  |  82%
| If R has a built-in function for a particular task, it's likely that function is highly optimized for that
| purpose and is your best option. As you become a more advanced R programmer, you'll design your own
| functions to perform tasks when there are no better options. We'll explore writing your own functions in
| future lessons.

...
  |======================================================================================             |  86%
| One more function related to creating sequences of numbers is rep(), which stands for 'replicate'. Let's
| look at a few uses.

...
  |==========================================================================================         |  91%
| If we're interested in creating a vector that contains 40 zeros, we can use rep(0, times = 40). Try it
| out.

> rep(0, times=40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

| That's the answer I was looking for.
  |==============================================================================================     |  95%
| If instead we want our vector to contain 10 repetitions of the vector (0, 1, 2), we can do rep(c(0, 1, 2),
| times = 10). Go ahead.

> rep(c(0,1,2), times=10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| All that practice is paying off!
  |===================================================================================================| 100%
| Finally, let's say that rather than repeating the vector (0, 1, 2) over and over again, we want our vector
| to contain 10 zeros, then 10 ones, then 10 twos. We can do this with the `each` argument. Try rep(c(0, 1,
| 2), each = 10).

> rep(c(0,1,2), each=10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| Nice work!

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more
| info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Sequences_of_Numbers.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 4
  |                                                                                                   |   0%

| The simplest and most common data structure in R is the vector.

...
  |===                                                                                                |   3%
| Vectors come in two different flavors: atomic vectors and lists. An atomic vector contains exactly one
| data type, whereas a list may contain multiple data types. We'll explore atomic vectors further before we
| get to lists.

...
  |=====                                                                                              |   5%
| In previous lessons, we dealt entirely with numeric vectors, which are one type of atomic vector. Other
| types of atomic vectors include logical, character, integer, and complex. In this lesson, we'll take a
| closer look at logical and character vectors.

...
  |========                                                                                           |   8%
| Logical vectors can contain the values TRUE, FALSE, and NA (for 'not available'). These values are
| generated as the result of logical 'conditions'. Let's experiment with some simple conditions.

...
  |===========                                                                                        |  11%
| First, create a numeric vector num_vect that contains the values 0.5, 55, -10, and 6.

> num_vect <- c(0.5, 55, -10, 6)

| You are quite good my friend!
  |=============                                                                                      |  14%
| Now, create a variable called tf that gets the result of num_vect < 1, which is read as 'num_vect is less
| than 1'.

> tf <- num_vect < 1

| Keep working like that and you'll get there!
  |================                                                                                   |  16%
| What do you think tf will look like?

1: a vector of 4 logical values
2: a single logical value

Selection: 1

| You are quite good my friend!
  |===================                                                                                |  19%
| Print the contents of tf now.

> tf
[1]  TRUE FALSE  TRUE FALSE

| All that practice is paying off!
  |=====================                                                                              |  22%
| The statement num_vect < 1 is a condition and tf tells us whether each corresponding element of our
| numeric vector num_vect satisfies this condition.

...
  |========================                                                                           |  24%
| The first element of num_vect is 0.5, which is less than 1 and therefore the statement 0.5 < 1 is TRUE.
| The second element of num_vect is 55, which is greater than 1, so the statement 55 < 1 is FALSE. The same
| logic applies for the third and fourth elements.

...
  |===========================                                                                        |  27%
| Let's try another. Type num_vect >= 6 without assigning the result to a new variable.

> num_vect >= 6
[1] FALSE  TRUE FALSE  TRUE

| You are really on a roll!
  |=============================                                                                      |  30%
| This time, we are asking whether each individual element of num_vect is greater than OR equal to 6. Since
| only 55 and 6 are greater than or equal to 6, the second and fourth elements of the result are TRUE and
| the first and third elements are FALSE.

...
  |================================                                                                   |  32%
| The `<` and `>=` symbols in these examples are called 'logical operators'. Other logical operators include
| `>`, `<=`, `==` for exact equality, and `!=` for inequality.

...
  |===================================                                                                |  35%
| If we have two logical expressions, A and B, we can ask whether at least one is TRUE with A | B (logical
| 'or' a.k.a. 'union') or whether they are both TRUE with A & B (logical 'and' a.k.a. 'intersection').
| Lastly, !A is the negation of A and is TRUE when A is FALSE and vice versa.

...
  |=====================================                                                              |  38%
| It's a good idea to spend some time playing around with various combinations of these logical operators
| until you get comfortable with their use. We'll do a few examples here to get you started.

...
  |========================================                                                           |  41%
| Try your best to predict the result of each of the following statements. You can use pencil and paper to
| work them out if it's helpful. If you get stuck, just guess and you've got a 50% chance of getting the
| right answer!

...
  |===========================================                                                        |  43%
| (3 > 5) & (4 == 4)

1: TRUE
2: FALSE

Selection: 2

| You're the best!
  |=============================================                                                      |  46%
| (TRUE == TRUE) | (TRUE == FALSE)

1: TRUE
2: FALSE

Selection: 2

| Almost! Try again.

| Break this problem down into 2 pieces. The `|` in the middle states that AT LEAST ONE of the pieces is
| TRUE. Your job is to figure out if that is an accurate statement. If so, the entire condition is TRUE. If
| not, it's FALSE.

1: FALSE
2: TRUE

Selection: 2

| Nice work!
  |================================================                                                   |  49%
| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: FALSE
2: TRUE

Selection: 2

| All that practice is paying off!
  |===================================================                                                |  51%
| Don't worry if you found these to be tricky. They're supposed to be. Working with logical statements in R
| takes practice, but your efforts will be rewarded in future lessons (e.g. subsetting and control
| structures).

...
  |======================================================                                             |  54%
| Character vectors are also very common in R. Double quotes are used to distinguish character objects, as
| in the following example.

...
  |========================================================                                           |  57%
| Create a character vector that contains the following words: "My", "name", "is". Remember to enclose each
| word in its own set of double quotes, so that R knows they are character strings. Store the vector in a
| variable called my_char.

> my_char <- c("My", "name", "is")

| All that hard work is paying off!
  |===========================================================                                        |  59%
| Print the contents of my_char to see what it looks like.

> my_char
[1] "My"   "name" "is"  

| Great job!
  |==============================================================                                     |  62%
| Right now, my_char is a character vector of length 3. Let's say we want to join the elements of my_char
| together into one continuous character string (i.e. a character vector of length 1). We can do this using
| the paste() function.

...?paste()
  |================================================================                                   |  65%
| Type paste(my_char, collapse = " ") now. Make sure there's a space between the double quotes in the
| `collapse` argument. You'll see why in a second.

> paste(my_char, collapst = "My name is")
[1] "My My name is"   "name My name is" "is My name is"  

| That's not the answer I was looking for, but try again. Or, type info() for more options.

| Use paste(my_char, collapse = " ") to collapse the words in the vector so they almost form a sentence.
| There should be a single space between the double quotes in the `collapse` argument so that there are
| single spaces separating the words.

> paste(my_char, collapse = "My name is")
[1] "MyMy name isnameMy name isis"

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more options.

| Use paste(my_char, collapse = " ") to collapse the words in the vector so they almost form a sentence.
| There should be a single space between the double quotes in the `collapse` argument so that there are
| single spaces separating the words.

> paste(my_char, collapse = " ")
[1] "My name is"

| You got it right!
  |===================================================================                                |  68%
| The `collapse` argument to the paste() function tells R that when we join together the elements of the
| my_char character vector, we'd like to separate them with single spaces.

...
  |======================================================================                             |  70%
| It seems that we're missing something.... Ah, yes! Your name!

...
  |========================================================================                           |  73%
| To add (or 'concatenate') your name to the end of my_char, use the c() function like this: c(my_char,
| "your_name_here"). Place your name in double quotes where I've put "your_name_here". Try it now, storing
| the result in a new variable called my_name.

> c(my_char, "Rachel")
[1] "My"     "name"   "is"     "Rachel"

| Almost! Try again. Or, type info() for more options.

| Tack your name on to the end of the my_char vector using the c() function.  Be sure to assign the result
| to a new variable called my_name. If your name was "Swirl", you would type my_name <- c(my_char, "Swirl").

> my_name <- c(my_char, "Rachel")

| You are doing so well!
  |===========================================================================                        |  76%
| Take a look at the contents of my_name.

> my_name
[1] "My"     "name"   "is"     "Rachel"

| Your dedication is inspiring!
  |==============================================================================                     |  78%
| Now, use the paste() function once more to join the words in my_name together into a single character
| string. Don't forget to say collapse = " "!

> paste(my_name, collapse = "")
[1] "MynameisRachel"

| You almost had it, but not quite. Try again. Or, type info() for more options.

| Use paste(my_name, collapse = " ") to join all four words together, separated by single spaces.

> paste(my_name, collapse = " ")
[1] "My name is Rachel"

| That's the answer I was looking for.
  |================================================================================                   |  81%
| In this example, we used the paste() function to collapse the elements of a single character vector.
| paste() can also be used to join the elements of multiple character vectors.

...
  |===================================================================================                |  84%
| In the simplest case, we can join two character vectors that are each of length 1 (i.e. join two words).
| Try paste("Hello", "world!", sep = " "), where the `sep` argument tells R that we want to separate the
| joined elements with a single space.

> paste("Hello", "world!", sep = " ")
[1] "Hello world!"

| You nailed it! Good job!
  |======================================================================================             |  86%
| For a slightly more complicated example, we can join two vectors, each of length 3. Use paste() to join
| the integer vector 1:3 with the character vector c("X", "Y", "Z"). This time, use sep = "" to leave no
| space between the joined elements.

> paste (1:3, c("X", "Y", "Z"))
[1] "1 X" "2 Y" "3 Z"

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Use paste(1:3, c("X", "Y", "Z"), sep = "") to see what happens when we join two vectors of equal length
| using paste().

> paste (1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"

| All that practice is paying off!
  |========================================================================================           |  89%
| What do you think will happen if our vectors are of different length? (Hint: we talked about this in a
| previous lesson.)

...
  |===========================================================================================        |  92%
| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is a predefined variable in R
| containing a character vector of all 26 letters in the English alphabet.

> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1"
[18] "R-2" "S-3" "T-4" "U-1" "V-2" "W-3" "X-4" "Y-1" "Z-2"

| You nailed it! Good job!
  |==============================================================================================     |  95%
| Since the character vector LETTERS is longer than the numeric vector 1:4, R simply recycles, or repeats,
| 1:4 until it matches the length of LETTERS.

...
  |================================================================================================   |  97%
| Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character vector by the paste()
| function.

...
  |===================================================================================================| 100%
| We'll discuss coercion in another lesson, but all it really means that the numbers 1, 2, 3, and 4 in the
| output above are no longer numbers to R, but rather characters "1", "2", "3", and "4".

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more
| info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 5
  |                                                                                                   |   0%

| Missing values play an important role in statistics and data analysis. Often, missing values must not be
| ignored, but rather they should be carefully studied to see if there's an underlying pattern or cause for
| their missingness.

...
  |=====                                                                                              |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing' (in the statistical sense).
| In this lesson, we'll explore missing values further.

...
  |==========                                                                                         |  11%
| Any operation involving NA generally yields NA as the result. To illustrate, let's create a vector c(44,
| NA, 5, NA) and assign it to a variable x.

> 
> x <- c(44, NA, 5, NA)

| Perseverance, that's the answer.
  |================                                                                                   |  16%
| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| That's correct!
  |=====================                                                                              |  21%
| Notice that the elements of the resulting vector that correspond with the NA values in x are also NA.

...
  |==========================                                                                         |  26%
| To make things a little more interesting, lets create a vector containing 1000 draws from a standard
| normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| Keep working like that and you'll get there!
  |===============================                                                                    |  32%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> y
   [1]  1.057077072  1.433811439 -0.498665602  0.061768831 -0.623792727  0.932410171  1.363079503
   [8]  1.294372668  2.172828831  0.555447110 -0.429026327  0.456699307  0.142400926  0.120204233
  [15]  1.881947474  0.696946772 -1.576856912  1.676415888  0.803449365 -0.083916610 -0.656604202
  [22]  0.462655230  0.053655151  0.380740850  0.194265896  0.606298748  1.056722100  0.752626985
  [29]  0.373422703 -0.051113115  0.772488891  0.654724362 -0.539359046  1.736458463  1.842831928
  [36]  0.433395844  0.840038297 -2.450149682 -0.008951463  1.646715908  1.364697855 -0.299433512
  [43]  0.240252936 -0.164805184 -1.515876500 -1.077873042  0.076110467 -0.239822969 -0.038980407
  [50]  0.158698141  0.706568927  0.167333345  0.002656099 -0.693893222  1.218761594 -0.862158557
  [57] -1.650616817  0.419944120  0.258699338  0.073500487 -0.658010483  0.051709166 -2.094394320
  [64] -0.855039223 -0.254623712 -0.855990126  0.678313967 -1.465164915  0.059139104 -0.432647473
  [71]  0.408604901  0.324331170 -0.277927866 -2.142486630 -0.692884729  0.002750398  0.295459439
  [78]  0.026094137 -1.122828665 -1.031594564  0.326409816 -0.216584796  0.398807227  0.024497261
  [85]  0.356799411 -3.313485046 -0.990047971 -0.400974787 -0.047047610  0.821022747  0.055303858
  [92] -1.565163641 -0.709856837 -0.727689820  0.364728371 -0.016396820  0.211982553 -0.354704151
  [99]  1.258744578  0.304607769 -0.234737587 -0.156557377  1.003844930 -0.609326159  1.742585543
 [106] -0.781740706 -0.638439713  1.061397818  1.536937247 -0.230460942 -0.145818429 -1.186629133
 [113] -0.320056992 -0.270907162  0.357600816  0.682212865  0.969949291 -0.634680904 -1.126758830
 [120]  0.771223092  0.141773575 -0.403422100 -0.238202639  0.608487254 -0.132590487  0.954751976
 [127]  0.755055099  1.739071062 -0.491617240 -0.107359471 -0.955257368 -1.184044794  0.489973290
 [134]  0.738917923  0.694633582  0.353193533 -1.676304367 -0.963898508 -0.504107262 -0.598799642
 [141]  0.138675599 -1.464806160  0.216901912  1.680054545  1.496706084 -0.656803539  0.068831406
 [148] -0.285447971  0.338969831 -1.516947618 -0.928922138 -0.443246387 -0.037136432 -0.447646220
 [155]  0.439070806  0.595769656  2.248407114 -0.419476493 -0.014005439  0.579813091  1.467225202
 [162]  0.652855073 -0.987563217 -0.120188876  0.548185718 -1.502415650 -1.178214681  1.083136340
 [169] -0.227809683  0.914992805  2.247317607  0.029151509 -1.844400340  0.104457690 -0.977030284
 [176]  0.903284981 -0.805191426 -1.772247181 -1.442805470 -1.123584817  1.291948726 -1.814241278
 [183]  0.983766905 -0.892995317  0.089175012 -0.264934896 -1.733662053  1.607004724 -1.216843746
 [190] -0.214369277  0.341820524  1.320390242 -0.401338655  0.421913836 -0.591226506 -0.120229709
 [197] -0.320013399  0.704581078  0.942399183  0.145670812  1.517072128 -0.777421573 -0.072009952
 [204] -0.138874031 -1.687910554  0.655644461  1.492999395 -0.238571813 -0.190028795  1.530986069
 [211]  2.176205293  0.243200414 -0.836941173  0.307985418 -1.710381640  0.765074735 -0.143288384
 [218]  1.088740335 -0.994879184 -1.346133227  0.001246018  0.007611422  1.128129943  0.102709317
 [225]  0.056494231  1.011975963 -2.559976955  0.090632700  0.649143312 -0.018438695 -0.264749357
 [232]  1.732900006 -1.490510314 -0.547734799 -0.174424737 -0.121316434 -0.200189823 -0.720701954
 [239] -0.028706589 -0.019811410  0.462044353  0.919211235 -0.200870391  1.276580880  0.398696181
 [246]  1.204493005 -0.103663843 -0.227027286  1.703032366 -0.215914165  0.726352628 -1.157612853
 [253]  0.494477393 -0.904042372  1.788770631 -0.049304026 -0.440548064  0.939149817  0.236718626
 [260]  1.034248824  1.136519188  0.294193354 -0.542254038 -1.223434199 -0.927239005 -0.565203648
 [267]  0.225929126 -1.688080879  0.717278088  0.839448509 -1.179753580 -0.196206672  0.273889117
 [274] -2.653533755  0.774676557  0.151874569  0.267414623 -0.942790856  1.100636980  0.093977632
 [281] -0.296794951  0.072912092  0.927865013  1.025196969  0.792301459 -1.516541908  0.956538264
 [288]  0.328712955  0.450970460  0.141899394 -0.071436947 -0.223611254  0.781098962 -1.444567350
 [295] -0.540596969  1.134256462  1.336493198 -1.343701548  0.274242607 -0.160948727 -0.735876290
 [302]  0.153856714 -1.027189410 -0.074230328 -0.234545067 -2.629048382  0.168128772  1.180481388
 [309] -0.242903461 -2.311839528 -1.994485491 -2.112462449 -0.848297731 -0.504782028 -0.424072774
 [316]  0.927456797 -1.389804280  0.832521741 -1.083597499  0.066232224  1.085270582  0.607280063
 [323] -0.167512103  0.336485752 -1.347122336 -1.294020798  0.585302843  0.766461432  1.160216312
 [330]  0.934200826  0.077080646  1.569873277 -1.576661426 -1.187388018  1.655809113  0.514557384
 [337]  0.308754995 -0.590939025 -0.187052136  1.043597422 -1.383805872  1.091998189  1.787690384
 [344]  0.239924223 -0.020346309  0.928142629  0.891498150  1.268717025  0.670608629 -2.261478853
 [351]  0.471128577 -1.331858249 -0.402641354  1.508565582  0.151243943 -1.115571552 -0.541784785
 [358] -0.606058830 -1.183606751  1.672584995  0.903834631  0.827224940  0.701024117 -0.383401601
 [365]  0.776611708 -0.817246835  2.205818443 -1.350488883  0.815548820  0.390789864  0.993418741
 [372] -0.444944679 -1.597646859  0.648818315  0.773619735  1.610094962  1.508055141 -1.587633089
 [379]  0.327053319 -0.841751971 -0.879899641  0.478701819 -0.468687419 -0.251945863 -1.013979044
 [386]  0.863729511  1.785412103  0.170231215 -2.264628711 -0.694344049 -0.712242825 -0.381508280
 [393] -1.623766943 -0.025402495 -0.052514429  0.105950452 -0.207700228 -2.036781712 -1.228039134
 [400] -1.461647994  1.271627833  0.014193496  1.653864082 -0.580341915 -0.148095791 -0.015932565
 [407] -0.606239390 -2.270255760  0.126934920  1.835570574 -0.090247061  1.703486086 -0.822298945
 [414] -1.239768685  0.335448983  0.901473074 -0.303678091 -1.468594753  0.266963347  0.399702092
 [421]  0.148534409 -0.879254269  0.634196424 -0.616344575 -1.996356094  0.334797797  0.170697427
 [428] -0.643821969  1.437303090  1.258933739 -1.234149070 -0.444260426  0.963187772  0.744149480
 [435] -0.163857998  0.627031512 -0.038532893  0.719203167  1.286282979 -0.437783209  0.189492776
 [442]  0.931168736 -1.053224474 -1.173077789 -0.280660161  0.334965804  0.598284896  0.952215122
 [449]  2.640965149 -0.473149531  1.542750944 -0.563215927 -0.293742819  0.414929201 -0.279377711
 [456]  1.429677791  0.088367370  2.020063243  1.136737916  0.695453156  0.616154164 -0.805675263
 [463]  1.378552811 -0.197123118  2.664416639  0.430303680 -0.002290820  2.745397448  0.944661212
 [470]  0.514381998 -0.385000476 -2.269638449  0.988814730 -0.900505792 -0.199664129  1.301951272
 [477]  1.155067823 -1.017466578 -0.298868634  0.098243761 -1.782114732 -0.885224323  0.860464647
 [484]  0.909015417  2.276833796  1.241433813  0.655638103  0.674662508 -1.154083721  1.620482087
 [491]  0.809814085  0.835120697  1.060390078 -0.202837755  0.860722357  0.951583009 -1.691644415
 [498]  0.961639058 -0.788707935  0.941610465 -0.348605772 -1.642527402  1.263670690  0.791482130
 [505]  0.936577372  0.672442545  0.619077429  0.656768986 -1.554589948 -0.518586799  1.720162435
 [512] -1.782348208 -0.097889041 -1.284612565 -0.556126258 -0.428159111  0.940822442  1.205844463
 [519]  0.518071791 -0.411595902 -1.076609780  1.601218828  0.418929642 -0.722467085 -2.225383879
 [526] -0.681450190 -0.202823676 -0.301880587  0.251946229  0.810740926  1.200402503  2.449706734
 [533]  1.860580364 -1.933358679  0.308266841 -0.261913305  0.686206861 -0.565370630  0.387718199
 [540]  1.094331385  0.306867045 -0.900083625  0.491825451  0.387928897  0.279762284  0.629988207
 [547] -0.657141957 -1.427894511  0.200862678  1.478638512  1.895750845 -0.397280147 -1.954380259
 [554] -0.235516829  0.729156842 -0.100145185  0.399781693 -1.506915192 -0.560264904 -0.904881662
 [561]  1.374488061  0.618268341  0.727752820  0.297612917 -0.113436190  0.336030568  1.158757598
 [568] -0.909554960 -0.870375889  1.301662809  0.862388680 -0.961030755 -0.619928374 -1.270159271
 [575]  1.007552144  0.528634159 -0.312381339 -0.156944644 -1.716976174 -0.989992385  1.122908127
 [582] -0.041955224 -0.794923016 -1.777384681  0.380896610 -0.091684333  0.963546494 -0.453911496
 [589]  1.773725738  0.228011710  1.614195990 -1.161944716  0.612137721  0.081309514 -1.555441611
 [596] -0.421528411  0.365126054  0.297744622 -0.684618754 -0.626415126 -0.825298251  0.483490608
 [603] -1.319192159  1.142016235  0.665208631 -1.083236403 -1.400625050 -0.005953804 -0.258919770
 [610] -0.037865806 -1.434001294  1.051612257 -0.460847462  1.015377571  0.215602270 -0.118031556
 [617]  2.592038739 -0.896993699  1.475696267  1.018557351 -0.231612133  0.727619746  1.059212517
 [624]  0.111501363 -0.127105742 -3.552160826  0.321400677 -0.430738604 -0.848140164  0.537151294
 [631]  1.900359733 -2.209921386 -1.171197574  0.107853911  0.377708337  0.195712021 -0.822224635
 [638]  1.428222966 -0.904290604  0.047486840  0.085703407  1.273456927 -0.257231713 -0.056282844
 [645] -1.414516310 -0.208908046  0.625114363 -1.037910907 -1.037074447  2.118853977 -0.574246793
 [652]  0.092749030  1.433761754  0.553267716 -1.428341510  2.516508162 -0.036074289  0.343684639
 [659]  0.559676185  1.051331588 -0.348634524 -0.443957392  0.409399862  3.122148340 -0.137361964
 [666]  1.158697944 -1.618545595 -1.493179807 -0.089193563  0.393260312 -1.329832364  0.674223325
 [673]  0.672128647 -1.463169971  0.453736742  0.117473809 -1.848592787  1.183589529 -0.178479809
 [680]  0.702933959 -0.769123882 -1.405791521 -1.957933121  1.512072871  1.562644188  0.366247636
 [687] -0.259593462  1.042225472 -0.452832225  0.343518397  1.129004010  0.664404456  1.364111884
 [694]  1.184887767 -0.179167058 -0.127270439  0.109046486 -1.267618862 -0.465768378 -0.589984420
 [701]  1.552157212  0.382392870  1.391694836  1.786503895  1.641709054 -0.711267414 -1.093645688
 [708] -3.425566113 -1.276685168  0.011038487 -0.955825038  0.148693406 -0.607853531 -0.631993286
 [715]  0.310536720 -0.348563776  0.390166080 -1.549024756 -0.785251897  0.602638339 -0.636839635
 [722] -0.772238854  0.869661729 -0.291951725  0.508514390 -0.285615777  0.637525554  0.163073632
 [729]  0.544671877 -0.361369530 -0.938823291 -0.234919341 -0.248560157  0.646755257  0.185294079
 [736] -3.284480843 -0.215342467  0.465141324 -0.864534313 -0.939698510 -0.326739719 -0.464562625
 [743]  0.017755461  0.873452851 -1.398580472 -0.597194683  0.242119970 -1.892162655 -0.113771026
 [750]  0.747726545 -0.540759265 -0.519198042 -0.866519387 -0.157598462  0.203507105  0.912734578
 [757]  0.502515113  0.248262401 -0.933953385 -0.012101568  1.043999468  1.486617178  0.699548471
 [764] -0.163058200 -0.466234504 -0.004186981 -1.266200267  0.079922488 -0.688642159 -0.276040255
 [771]  1.005010816 -0.673419057  0.236372484  1.957378045 -0.281498935  0.367362039 -0.178310868
 [778]  0.081021286 -0.301016992 -0.272333510 -0.328594490 -1.823701050 -0.543011510 -0.938835071
 [785]  0.041840759  1.786304864 -0.802708142  1.271463780 -2.135622203 -0.322717651  0.491880867
 [792]  0.128280530  1.368904417 -0.589118833 -0.373397999 -0.953461268 -0.508807085 -1.451995324
 [799]  0.308280056  0.380704992  0.920892693  0.987132820  0.324346071  0.706211697 -1.085666726
 [806] -0.728836122 -1.014391318 -0.447997547 -0.206546366  0.485191485 -0.112248863  0.144012484
 [813] -0.078365041  1.299012860 -0.289537832  0.068698354 -0.845943992 -0.261499865 -1.362634532
 [820]  0.407170059 -0.245002202  1.423115673 -0.498207710  0.528373858 -0.496883673  1.381040016
 [827] -0.784393474  1.672168984  1.151163687  2.061866355 -0.377656006  0.290717934  2.760826136
 [834] -1.324712800 -1.773232738 -0.358858819  0.580633159 -0.420830804 -1.806264739 -0.638612841
 [841] -0.764959720 -1.850804077  1.449390450 -0.527276531  2.106318221 -1.703347915 -2.289293365
 [848] -0.579012859 -0.292235708  0.276202542 -0.415353961  0.082475618 -1.540740564  0.339112905
 [855] -2.516856374  0.452196182  0.240056973 -0.017485584  0.597725982  0.651102014  0.480671096
 [862]  0.564368085 -2.160212934  0.002504133 -1.504157877  0.708339250  2.644335210  0.516340342
 [869]  0.344267858 -1.688742665 -0.039667036 -0.566328005 -0.235722939 -0.698581888 -2.052616107
 [876] -0.348945013 -0.283689416  0.173727724 -1.636326847  0.498960399  0.066763378  0.280548598
 [883]  2.385979001 -1.088398820 -0.486818313  0.956578727  0.080786624 -0.153912718  0.402512260
 [890] -0.366090254  2.053856435 -1.230531837 -0.065928883  0.206522182  0.672650850  1.051591343
 [897]  1.215464760 -0.135241642  0.722967032  0.953576669 -2.732586914 -0.893556048  0.132353405
 [904] -1.781138381 -0.140066979  0.291119386 -1.364872613 -0.042524097 -0.430449786 -0.672547969
 [911]  0.333452606  1.226161375  1.613089815 -0.139235010 -0.094922864  0.065358123 -1.639582109
 [918] -0.562161491 -0.155383299 -1.417143300 -0.984494359 -0.077910111 -2.033774263 -0.306426981
 [925]  0.668189057  2.865635000 -1.762871922  1.471000295  1.216917572 -0.985426943 -1.561718602
 [932] -0.351327193  1.134198684 -0.088683509 -0.294893893  1.418194830 -1.779603822  0.374387010
 [939]  0.009287880  3.275842481 -1.414085849 -0.588167418 -0.377452017  0.426322098 -0.998812931
 [946] -0.149400067  1.301940227  0.820587889 -0.335835089  0.108779089 -0.389784693  0.002198244
 [953] -1.097554880  0.915270634 -0.577916954 -1.908238488 -2.496837586 -2.481787172  1.045938747
 [960] -0.247293148 -0.874459231 -0.192561238 -0.404841631  0.319581192  0.469495097  1.090370268
 [967]  0.251005120  2.007124513  0.460493186 -1.066985432 -0.712287743 -0.583210073 -0.367520673
 [974]  0.565592982  0.251303988  0.277382464  0.220338739 -0.545178485 -0.467935690  1.367869205
 [981] -0.578154888  0.265966067 -0.011071654  0.052307875  1.666754037  1.323506864 -0.876340550
 [988] -0.290818007  0.074224992 -0.016911300 -0.818945777  0.934188609 -0.621847061  0.997834897
 [995] -0.973580170 -0.436365608 -0.301275930  0.004287815  0.404832709 -0.554687888

| Not quite right, but keep trying. Or, type info() for more options.

| Type z <- rep(NA, 1000) to generate a vector of 1000 NAs.

> z <- rep (NA, 1000)

| You are really on a roll!
  |====================================                                                               |  37%
| Finally, let's select 100 elements at random from these 2000 values (combining y and z) such that we don't
| know how many NAs we'll wind up with or what positions they'll occupy in our final vector -- my_data <-
| sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| You nailed it! Good job!
  |==========================================                                                         |  42%
| Let's first ask the question of where our NAs are located in our data. The is.na() function tells us
| whether each element of a vector is NA. Call is.na() on my_data and assign the result to my_na.

> my_data
  [1] -2.27025576          NA -0.01107165  1.72016244 -0.20283776          NA          NA          NA
  [9]          NA -0.05111311          NA          NA          NA          NA -0.32005699  1.12900401
 [17]  0.92089269  1.01197596 -0.04195522          NA  1.15116369          NA          NA          NA
 [25]  0.72635263  2.06186635          NA -0.55612626  0.38070499 -0.02540249          NA          NA
 [33]          NA          NA          NA          NA          NA          NA -0.21534247 -0.01691130
 [41] -0.15759846 -1.29402080          NA  0.40717006 -1.31919216  0.29774462          NA -1.46164799
 [49]  1.06039008 -0.29943351  0.06869835 -0.40264135          NA          NA          NA          NA
 [57]          NA          NA  0.07708065          NA          NA  0.82722494 -0.67254797          NA
 [65]          NA -0.86651939          NA -1.42789451          NA          NA          NA          NA
 [73]  0.02915151          NA  0.64881832          NA  0.95357667          NA          NA          NA
 [81] -0.56537063          NA  0.06883141          NA          NA          NA -2.11246245          NA
 [89] -1.54902476          NA          NA -1.23414907  0.67422333 -1.70334792  0.43030368 -0.65801048
 [97]          NA -0.77742157  0.07422499 -1.57685691

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more options.

| Assign the result of is.na(my_data) to the variable my_na.

> my_na <- is.na()
Error in is.na() : 0 arguments passed to 'is.na' which requires 1
> my_na <- is.na(my_data)

| Great job!
  |===============================================                                                    |  47%
| Now, print my_na to see what you came up with.

> my_na
  [1] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE
 [18] FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
 [35]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
 [52] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE
 [69]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE
 [86]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE

| You are amazing!
  |====================================================                                               |  53%
| Everywhere you see a TRUE, you know the corresponding element of my_data is NA. Likewise, everywhere you
| see a FALSE, you know the corresponding element of my_data is one of our random draws from the standard
| normal distribution.

...
  |=========================================================                                          |  58%
| In our previous discussion of logical operators, we introduced the `==` operator as a method of testing
| for equality between two objects. So, you might think the expression my_data == NA yields the same results
| as is.na(). Give it a try.

> my_data == NA 
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [35] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [69] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| You got it right!
  |===============================================================                                    |  63%
| The reason you got a vector of all NAs is that NA is not really a value, but just a placeholder for a
| quantity that is not available. Therefore the logical expression is incomplete and R has no choice but to
| return a vector of the same length as my_data that contains all NAs.

...
  |====================================================================                               |  68%
| Don't worry if that's a little confusing. The key takeaway is to be cautious when using logical
| expressions anytime NAs might creep in, since a single NA value can derail the entire thing.

...
  |=========================================================================                          |  74%
| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for every NA and FALSE for
| every numeric value, we can compute the total number of NAs in our data.

...
  |==============================================================================                     |  79%
| The trick is to recognize that underneath the surface, R represents TRUE as the number 1 and FALSE as the
| number 0. Therefore, if we take the sum of a bunch of TRUEs and FALSEs, we get the total number of TRUEs.

...
  |===================================================================================                |  84%
| Let's give that a try here. Call the sum() function on my_na to count the total number of TRUEs in my_na,
| and thus the total number of NAs in my_data. Don't assign the result to a new variable.

> sum(my_na)
[1] 52

| You are quite good my friend!
  |=========================================================================================          |  89%
| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves that everything 'adds up'.
| Print my_data to the console.

> my_data
  [1] -2.27025576          NA -0.01107165  1.72016244 -0.20283776          NA          NA          NA
  [9]          NA -0.05111311          NA          NA          NA          NA -0.32005699  1.12900401
 [17]  0.92089269  1.01197596 -0.04195522          NA  1.15116369          NA          NA          NA
 [25]  0.72635263  2.06186635          NA -0.55612626  0.38070499 -0.02540249          NA          NA
 [33]          NA          NA          NA          NA          NA          NA -0.21534247 -0.01691130
 [41] -0.15759846 -1.29402080          NA  0.40717006 -1.31919216  0.29774462          NA -1.46164799
 [49]  1.06039008 -0.29943351  0.06869835 -0.40264135          NA          NA          NA          NA
 [57]          NA          NA  0.07708065          NA          NA  0.82722494 -0.67254797          NA
 [65]          NA -0.86651939          NA -1.42789451          NA          NA          NA          NA
 [73]  0.02915151          NA  0.64881832          NA  0.95357667          NA          NA          NA
 [81] -0.56537063          NA  0.06883141          NA          NA          NA -2.11246245          NA
 [89] -1.54902476          NA          NA -1.23414907  0.67422333 -1.70334792  0.43030368 -0.65801048
 [97]          NA -0.77742157  0.07422499 -1.57685691

| You are really on a roll!
  |==============================================================================================     |  95%
| Now that we've got NAs down pat, let's look at a second type of missing value -- NaN, which stands for
| 'not a number'. To generate NaN, try dividing (using a forward slash) 0 by 0 now.

> 0/0
[1] NaN

| You got it!
  |===================================================================================================| 100%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if you subtract Inf from Inf?

> Inf - Inf
[1] NaN

| All that hard work is paying off!

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more
| info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Missing_Values.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 6
  |                                                                                                   |   0%

| In this lesson, we'll see how to extract elements from a vector based on some conditions that we specify.

...
  |===                                                                                                |   3%
| For example, we may only be interested in the first 20 elements of a vector, or only the elements that are
| not NA, or only those that are positive or correspond to a specific variable of interest. By the end of
| this lesson, you'll know how to handle each of these scenarios.

...
  |=====                                                                                              |   5%
| I've created for you a vector called x that contains a random ordering of 20 numbers (from a standard
| normal distribution) and 20 NAs. Type x now to see what it looks like.

> x
 [1]  0.05483418          NA          NA          NA  0.40729832          NA -0.37584016  0.34474057
 [9] -1.00254879 -2.15729574          NA          NA  1.31548057 -1.07357655          NA          NA
[17]          NA -0.24016863 -0.60393171  0.88711462  0.01384597  0.34188690 -1.50384096          NA
[25]          NA          NA          NA  0.38988011          NA  0.13569696  0.13971935          NA
[33]          NA          NA          NA -1.44356554          NA -0.13717810          NA -0.14252239

| You are quite good my friend!
  |========                                                                                           |   8%
| The way you tell R that you want to select some particular elements (i.e. a 'subset') from a vector is by
| placing an 'index vector' in square brackets immediately following the name of the vector.

...
  |==========                                                                                         |  11%
| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1]  0.05483418          NA          NA          NA  0.40729832          NA -0.37584016  0.34474057
 [9] -1.00254879 -2.15729574

| You are doing so well!
  |=============                                                                                      |  13%
| Index vectors come in four different flavors -- logical vectors, vectors of positive integers, vectors of
| negative integers, and vectors of character strings -- each of which we'll cover in this lesson.

...
  |================                                                                                   |  16%
| Let's start by indexing with logical vectors. One common scenario when working with real-world data is
| that we want to extract all elements of a vector that are not NA (i.e. missing data). Recall that is.na(x)
| yields a vector of logical values the same length as x, with TRUEs corresponding to NA values in x and
| FALSEs corresponding to non-NA values in x.

...
  |==================                                                                                 |  18%
| What do you think x[is.na(x)] will give you?

1: A vector with no NAs
2: A vector of TRUEs and FALSEs
3: A vector of length 0
4: A vector of all NAs

Selection: 2

| Keep trying!

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what do
| you expect to happen?

1: A vector of all NAs
2: A vector of length 0
3: A vector with no NAs
4: A vector of TRUEs and FALSEs

Selection: 3

| That's not the answer I was looking for, but try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what do
| you expect to happen?

1: A vector with no NAs
2: A vector of TRUEs and FALSEs
3: A vector of all NAs
4: A vector of length 0

Selection: 1

| You're close...I can feel it! Try it again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what do
| you expect to happen?

1: A vector of length 0
2: A vector with no NAs
3: A vector of all NAs
4: A vector of TRUEs and FALSEs

Selection: 1

| Almost! Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what do
| you expect to happen?

1: A vector with no NAs
2: A vector of all NAs
3: A vector of TRUEs and FALSEs
4: A vector of length 0

Selection: 1

| Not quite right, but keep trying.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what do
| you expect to happen?

1: A vector of TRUEs and FALSEs
2: A vector with no NAs
3: A vector of all NAs
4: A vector of length 0

Selection: 1

| Nice try, but that's not exactly what I was hoping for. Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what do
| you expect to happen?

1: A vector of all NAs
2: A vector with no NAs
3: A vector of TRUEs and FALSEs
4: A vector of length 0

Selection: 1

| All that practice is paying off!
  |=====================                                                                              |  21%
| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| All that hard work is paying off!
  |=======================                                                                            |  24%
| Recall that `!` gives us the negation of a logical expression, so !is.na(x) can be read as 'is not NA'.
| Therefore, if we want to create a vector called y that contains all of the non-NA values from x, we can
| use y <- x[!is.na(x)]. Give it a try.

> y <- x[!is.na(x)]

| Perseverance, that's the answer.
  |==========================                                                                         |  26%
| Print y to the console.

> y
 [1]  0.05483418  0.40729832 -0.37584016  0.34474057 -1.00254879 -2.15729574  1.31548057 -1.07357655
 [9] -0.24016863 -0.60393171  0.88711462  0.01384597  0.34188690 -1.50384096  0.38988011  0.13569696
[17]  0.13971935 -1.44356554 -0.13717810 -0.14252239

| Nice work!
  |=============================                                                                      |  29%
| Now that we've isolated the non-missing values of x and put them in y, we can subset y as we please.

...
  |===============================                                                                    |  32%
| Recall that the expression y > 0 will give us a vector of logical values the same length as y, with TRUEs
| corresponding to values of y that are greater than zero and FALSEs corresponding to values of y that are
| less than or equal to zero. What do you think y[y > 0] will give you?

1: A vector of all NAs
2: A vector of length 0
3: A vector of TRUEs and FALSEs
4: A vector of all the negative elements of y
5: A vector of all the positive elements of y

Selection: 5

| You are quite good my friend!
  |==================================                                                                 |  34%
| Type y[y > 0] to see that we get all of the positive elements of y, which are also the positive elements
| of our original vector x.

> y[y>0]
 [1] 0.05483418 0.40729832 0.34474057 1.31548057 0.88711462 0.01384597 0.34188690 0.38988011 0.13569696
[10] 0.13971935

| Keep up the great work!
  |====================================                                                               |  37%
| You might wonder why we didn't just start with x[x > 0] to isolate the positive elements of x. Try that
| now to see why.

> x{x>0
Error: unexpected '{' in "x{"
> x[x>0]
 [1] 0.05483418         NA         NA         NA 0.40729832         NA 0.34474057         NA         NA
[10] 1.31548057         NA         NA         NA 0.88711462 0.01384597 0.34188690         NA         NA
[19]         NA         NA 0.38988011         NA 0.13569696 0.13971935         NA         NA         NA
[28]         NA         NA         NA

| Nice work!
  |=======================================                                                            |  39%
| Since NA is not a value, but rather a placeholder for an unknown quantity, the expression NA > 0 evaluates
| to NA. Hence we get a bunch of NAs mixed in with our positive numbers when we do this.

...
  |==========================================                                                         |  42%
| Combining our knowledge of logical operators with our new knowledge of subsetting, we could do this --
| x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x>0]
 [1] 0.05483418 0.40729832 0.34474057 1.31548057 0.88711462 0.01384597 0.34188690 0.38988011 0.13569696
[10] 0.13971935

| Excellent work!
  |============================================                                                       |  45%
| In this case, we request only values of x that are both non-missing AND greater than zero.

...
  |===============================================                                                    |  47%
| I've already shown you how to subset just the first ten values of x using x[1:10]. In this case, we're
| providing a vector of positive integers inside of the square brackets, which tells R to return only the
| elements of x numbered 1 through 10.

...
  |==================================================                                                 |  50%
| Many programming languages use what's called 'zero-based indexing', which means that the first element of
| a vector is considered element 0. R uses 'one-based indexing', which (you guessed it!) means the first
| element of a vector is considered element 1.

...
  |====================================================                                               |  53%
| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function to
| specify the element numbers as a numeric vector.

> c(x[2, 5, 6])
Error in x[2, 5, 6] : incorrect number of dimensions
> info ()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> x[c(3,5,7)]
[1]         NA  0.4072983 -0.3758402

| Keep working like that and you'll get there!
  |=======================================================                                            |  55%
| It's important that when using integer vectors to subset our vector x, we stick with the set of indexes
| {1, 2, ..., 40} since x only has 40 elements. What happens if we ask for the zeroth element of x (i.e.
| x[0])? Give it a try.

> x[0]
numeric(0)

| Nice work!
  |=========================================================                                          |  58%
| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent us from doing this. What if
| we ask for the 3000th element of x? Try it out.

> x[3000]
[1] NA

| All that hard work is paying off!
  |============================================================                                       |  61%
| Again, nothing useful, but R doesn't prevent us from asking for it. This should be a cautionary tale. You
| should always make sure that what you are asking for is within the bounds of the vector you're working
| with.

...
  |===============================================================                                    |  63%
| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It would be pretty tedious to
| construct a vector containing all numbers 1 through 40 EXCEPT 2 and 10.

...
  |=================================================================                                  |  66%
| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us ONLY the 2nd and 10th elements
| of x, x[c(-2, -10)] gives us all elements of x EXCEPT for the 2nd and 10 elements.  Try x[c(-2, -10)] now
| to see this.

> x(c[-2, -10])
Error: could not find function "x"
> x[c(-2, -10)]
 [1]  0.05483418          NA          NA  0.40729832          NA -0.37584016  0.34474057 -1.00254879
 [9]          NA          NA  1.31548057 -1.07357655          NA          NA          NA -0.24016863
[17] -0.60393171  0.88711462  0.01384597  0.34188690 -1.50384096          NA          NA          NA
[25]          NA  0.38988011          NA  0.13569696  0.13971935          NA          NA          NA
[33]          NA -1.44356554          NA -0.13717810          NA -0.14252239

| All that hard work is paying off!
  |====================================================================                               |  68%
| A shorthand way of specifying multiple negative numbers is to put the negative sign out in front of the
| vector of positive numbers. Type x[-c(2, 10)] to get the exact same result.

> x[-c(2,10)]
 [1]  0.05483418          NA          NA  0.40729832          NA -0.37584016  0.34474057 -1.00254879
 [9]          NA          NA  1.31548057 -1.07357655          NA          NA          NA -0.24016863
[17] -0.60393171  0.88711462  0.01384597  0.34188690 -1.50384096          NA          NA          NA
[25]          NA  0.38988011          NA  0.13569696  0.13971935          NA          NA          NA
[33]          NA -1.44356554          NA -0.13717810          NA -0.14252239

| You got it!
  |======================================================================                             |  71%
| So far, we've covered three types of index vectors -- logical, positive integer, and negative integer. The
| only remaining type requires us to introduce the concept of 'named' elements.

...
  |=========================================================================                          |  74%
| Create a numeric vector with three named elements using vect <- c(foo = 11, bar = 2, norf = NA).

> vect <- c(foo=11, bar=2, norf-NA)
Error: object 'norf' not found
> vect <- c(foo=11, bar=2, norf=NA)

| Perseverance, that's the answer.
  |============================================================================                       |  76%
| When we print vect to the console, you'll see that each element has a name. Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| Excellent work!
  |==============================================================================                     |  79%
| We can also get the names of vect by passing vect as an argument to the names() function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| Great job!
  |=================================================================================                  |  82%
| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do that now.

> vect2 <- c(11, 2, NA)

| Your dedication is inspiring!
  |===================================================================================                |  84%
| Then, we can add the `names` attribute to vect2 after the fact with names(vect2) <- c("foo", "bar",
| "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| Perseverance, that's the answer.
  |======================================================================================             |  87%
| Now, let's check that vect and vect2 are the same by passing them as arguments to the identical()
| function.

> identical(vect, vect2)
[1] TRUE

| You nailed it! Good job!
  |=========================================================================================          |  89%
| Indeed, vect and vect2 are identical named vectors.

...
  |===========================================================================================        |  92%
| Now, back to the matter of subsetting a vector by named elements. Which of the following commands do you
| think would give us the second element of vect?

1: vect["bar"]
2: vect[bar]
3: vect["2"]

Selection: 3

| Not quite! Try again.

| If we want the element named "bar" (i.e. the second element of vect), which command would get us that?

1: vect[bar]
2: vect["2"]
3: vect["bar"]

Selection: 3

| You nailed it! Good job!
  |==============================================================================================     |  95%
| Now, try it out.

> 
> vect["bar"]
bar 
  2 

| That's correct!
  |================================================================================================   |  97%
| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it out.

> vect[c("foo","bar")]
foo bar 
 11   2 

| Excellent job!
  |===================================================================================================| 100%
| Now you know all four methods of subsetting data from vectors. Different approaches are best in different
| scenarios and when in doubt, try it out!

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more
| info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Subsetting_Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 7
  |                                                                                                   |   0%

| In this lesson, we'll cover matrices and data frames. Both represent 'rectangular' data types, meaning
| that they are used to store tabular data, with rows and columns.

...
  |===                                                                                                |   3%
| The main difference, as you'll see, is that matrices can only contain a single class of data, while data
| frames can consist of many different classes of data.

...
  |======                                                                                             |   6%
| Let's create a vector containing the numbers 1 through 20 using the `:` operator. Store the result in a
| variable called my_vector.

> my_vector <- 1:20

| Excellent job!
  |========                                                                                           |   9%
| View the contents of the vector you just created.

> my_vector
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Great job!
  |===========                                                                                        |  11%
| The dim() function tells us the 'dimensions' of an object. What happens if we do dim(my_vector)? Give it a
| try.

> dim(my_vector)
NULL

| You got it right!
  |==============                                                                                     |  14%
| Clearly, that's not very helpful! Since my_vector is a vector, it doesn't have a `dim` attribute (so it's
| just NULL), but we can find its length using the length() function. Try that now.

> length(my_vector)
[1] 20

| Great job!
  |=================                                                                                  |  17%
| Ah! That's what we wanted. But, what happens if we give my_vector a `dim` attribute? Let's give it a try.
| Type dim(my_vector) <- c(4, 5).

> dim(my_vector) <- c(4,5)

| You're the best!
  |====================                                                                               |  20%
| It's okay if that last command seemed a little strange to you. It should! The dim() function allows you to
| get OR set the `dim` attribute for an R object. In this case, we assigned the value c(4, 5) to the `dim`
| attribute of my_vector.

...
  |=======================                                                                            |  23%
| Use dim(my_vector) to confirm that we've set the `dim` attribute correctly.

> dim(my_vector)
[1] 4 5

| That's correct!
  |=========================                                                                          |  26%
| Another way to see this is by calling the attributes() function on my_vector. Try it now.

> attributes(my_vector)
$dim
[1] 4 5


| Perseverance, that's the answer.
  |============================                                                                       |  29%
| Just like in math class, when dealing with a 2-dimensional object (think rectangular table), the first
| number is the number of rows and the second is the number of columns. Therefore, we just gave my_vector 4
| rows and 5 columns.

...
  |===============================                                                                    |  31%
| But, wait! That doesn't sound like a vector any more. Well, it's not. Now it's a matrix. View the contents
| of my_vector now to see what it looks like.

> my_vector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| Excellent job!
  |==================================                                                                 |  34%
| Now, let's confirm it's actually a matrix by using the class() function. Type class(my_vector) to see what
| I mean.

> class(my_vector)
[1] "matrix"

| You nailed it! Good job!
  |=====================================                                                              |  37%
| Sure enough, my_vector is now a matrix. We should store it in a new variable that helps us remember what
| it is. Store the value of my_vector in a new variable called my_matrix.

> my_matrix <- my_vector

| You are amazing!
  |========================================                                                           |  40%
| The example that we've used so far was meant to illustrate the point that a matrix is simply an atomic
| vector with a dimension attribute. A more direct method of creating the same matrix uses the matrix()
| function.

...
  |==========================================                                                         |  43%
| Bring up the help file for the matrix() function now using the `?` function.

> ?matrix()

| That's not the answer I was looking for, but try again. Or, type info() for more options.

| The command ?matrix will do the trick.

> ?matrix

| Perseverance, that's the answer.

  |=============================================                                                      |  46%
| Now, look at the documentation for the matrix function and see if you can figure out how to create a
| matrix containing the same numbers (1-20) and dimensions (4 rows, 5 columns) by calling the matrix()
| function. Store the result in a variable called my_matrix2.

> ?matrix
> my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)

| Nice work!
  |================================================                                                   |  49%
| Finally, let's confirm that my_matrix and my_matrix2 are actually identical. The identical() function will
| tell us if its first two arguments are the same. Try it out.

> my_matrix2 = my_matrix

| One more time. You can do it! Or, type info() for more options.

| If you're not sure about this one, then checkout the documentation for identical() using the `?` function.

> my_matrix2 == my_matrix
     [,1] [,2] [,3] [,4] [,5]
[1,] TRUE TRUE TRUE TRUE TRUE
[2,] TRUE TRUE TRUE TRUE TRUE
[3,] TRUE TRUE TRUE TRUE TRUE
[4,] TRUE TRUE TRUE TRUE TRUE

| You almost had it, but not quite. Try again. Or, type info() for more options.

| If you're not sure about this one, then checkout the documentation for identical() using the `?` function.

> identical(my_matrix, my_matrix2)
[1] TRUE

| You are amazing!
  |===================================================                                                |  51%
| Now, imagine that the numbers in our table represent some measurements from a clinical experiment, where
| each row represents one patient and each column represents one variable for which measurements were taken.

...
  |======================================================                                             |  54%
| We may want to label the rows, so that we know which numbers belong to each patient in the experiment. One
| way to do this is to add a column to the matrix, which contains the names of all four people.

...
  |=========================================================                                          |  57%
| Let's start by creating a character vector containing the names of our patients -- Bill, Gina, Kelly, and
| Sean. Remember that double quotes tell R that something is a character string. Store the result in a
| variable called patients.

> patients <- (c("Bill", "Gina", "Kelly"))

| Not exactly. Give it another go. Or, type info() for more options.

| Make sure to capitalize the first letter of each name and to store the result in a variable called
| patients. Also, don't get the order of the patients mixed up! That would be a disaster!

> patients <- (c["Bill", "Gina", "Kelly"])
Error in c["Bill", "Gina", "Kelly"] : 
  object of type 'builtin' is not subsettable
> patients <- [c("Bill", "Gina", "Kelly")]
Error: unexpected '[' in "patients <- ["
> patients <- c("Bill", "Gina", "Kelly")

| Not exactly. Give it another go. Or, type info() for more options.

| Make sure to capitalize the first letter of each name and to store the result in a variable called
| patients. Also, don't get the order of the patients mixed up! That would be a disaster!

> patients <- c("Bill", "Gina", "Kelly", "Sean")

| You are amazing!
  |===========================================================                                        |  60%
| Now we'll use the cbind() function to 'combine columns'. Don't worry about storing the result in a new
| variable. Just call cbind() with two arguments -- the patients vector and my_matrix.

> cbind(patients, my_matrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

| That's a job well done!
  |==============================================================                                     |  63%
| Something is fishy about our result! It appears that combining the character vector with our matrix of
| numbers caused everything to be enclosed in double quotes. This means we're left with a matrix of
| character strings, which is no good.

...
  |=================================================================                                  |  66%
| If you remember back to the beginning of this lesson, I told you that matrices can only contain ONE class
| of data. Therefore, when we tried to combine a character vector with a numeric matrix, R was forced to
| 'coerce' the numbers to characters, hence the double quotes.

...
  |====================================================================                               |  69%
| This is called 'implicit coercion', because we didn't ask for it. It just happened. But why didn't R just
| convert the names of our patients to numbers? I'll let you ponder that question on your own.

...
  |=======================================================================                            |  71%
| So, we're still left with the question of how to include the names of our patients in the table without
| destroying the integrity of our numeric data. Try the following -- my_data <- data.frame(patients,
| my_matrix)

> my_data <- data.frame(patients, my_matrix)

| All that practice is paying off!
  |==========================================================================                         |  74%
| Now view the contents of my_data to see what we've come up with.

> my_data
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

| Keep working like that and you'll get there!
  |============================================================================                       |  77%
| It looks like the data.frame() function allowed us to store our character vector of names right alongside
| our matrix of numbers. That's exactly what we were hoping for!

...
  |===============================================================================                    |  80%
| Behind the scenes, the data.frame() function takes any number of arguments and returns a single object of
| class `data.frame` that is composed of the original objects.

...
  |==================================================================================                 |  83%
| Let's confirm this by calling the class() function on our newly created data frame.

> class(my_data)
[1] "data.frame"

| All that practice is paying off!
  |=====================================================================================              |  86%
| It's also possible to assign names to the individual rows and columns of a data frame, which presents
| another possible way of determining which row of values in our table belongs to each patient.

...
  |========================================================================================           |  89%
| However, since we've already solved that problem, let's solve a different problem by assigning names to
| the columns of our data frame so that we know what type of measurement each column represents.

...
  |===========================================================================================        |  91%
| Since we have six columns (including patient names), we'll need to first create a vector containing one
| element for each column. Create a character vector called cnames that contains the following values (in
| order) -- "patient", "age", "weight", "bp", "rating", "test".

> cnames <- c("patient", "age", "weight", "bp", "rating", "test")

| Great job!
  |=============================================================================================      |  94%
| Now, use the colnames() function to set the `colnames` attribute for our data frame. This is similar to
| the way we used the dim() function earlier in this lesson.

> colnames(cnames)
NULL

| That's not the answer I was looking for, but try again. Or, type info() for more options.

| Try colnames(my_data) <- cnames.

> colnames(my_data) <- cnames

| Excellent job!
  |================================================================================================   |  97%
| Let's see if that got the job done. Print the contents of my_data.

> my_data
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

| You are really on a roll!
  |===================================================================================================| 100%
| In this lesson, you learned the basics of working with two very important and common data structures --
| matrices and data frames. There's much more to learn and we'll be covering more advanced topics,
| particularly with respect to data frames, in future lessons.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more
| info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Matrices_and_Data_Frames.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 8
  |                                                                                                   |   0%

| This lesson is meant to be a short introduction to logical operations in R.

...

  |==                                                                                                 |   2%
| There are two logical values in R, also called boolean values. They are TRUE and FALSE. In R you can
| construct logical expressions which will evaluate to either TRUE or FALSE.

...
  |====                                                                                               |   4%
| Many of the questions in this lesson will involve evaluating logical expressions. It may be useful to open
| up a second R terminal where you can experiment with some of these expressions.

...
  |======                                                                                             |   6%
| Creating logical expressions requires logical operators. You're probably familiar with arithmetic
| operators like `+`, `-`, `*`, and `/`. The first logical operator we are going to discuss is the equality
| operator, represented by two equals signs `==`. Use the equality operator below to find out if TRUE is
| equal to TRUE.

> TRUE == TRUE
[1] TRUE

| You're the best!
  |========                                                                                           |   8%
| Just like arithmetic, logical expressions can be grouped by parenthesis so that the entire expression
| (TRUE == TRUE) == TRUE evaluates to TRUE.

...
  |==========                                                                                         |  10%
| To test out this property, try evaluating (FALSE == TRUE) == FALSE .

> (FALSE == TRUE) == FALSE
[1] TRUE

| Your dedication is inspiring!
  |============                                                                                       |  12%
| The equality operator can also be used to compare numbers. Use `==` to see if 6 is equal to 7.

> 6 == 7
[1] FALSE

| You are doing so well!
  |==============                                                                                     |  14%
| The previous expression evaluates to FALSE because 6 is less than 7. Thankfully, there are inequality
| operators that allow us to test if a value is less than or greater than another value.

...
  |================                                                                                   |  16%
| The less than operator `<` tests whether the number on the left side of the operator (called the left
| operand) is less than the number on the right side of the operator (called the right operand). Write an
| expression to test whether 6 is less than 7.

> 6 < 7
[1] TRUE

| Keep working like that and you'll get there!
  |=================                                                                                  |  18%
| There is also a less-than-or-equal-to operator `<=` which tests whether the left operand is less than or
| equal to the right operand. Write an expression to test whether 10 is less than or equal to 10.

> 10 <= 10
[1] TRUE

| Nice work!
  |===================                                                                                |  20%
| Keep in mind that there are the corresponding greater than `>` and greater-than-or-equal-to `>=`
| operators.

...
  |=====================                                                                              |  22%
| Which of the following evaluates to FALSE?

1: 6 < 8
2: 9 >= 10
3: 7 == 7
4: 0 > -36

Selection: 2

| You got it!
  |=======================                                                                            |  24%
| Which of the following evaluates to TRUE?

1: 9 >= 10
2: -6 > -7
3: 7 == 9
4: 57 < 8

Selection: 2

| You nailed it! Good job!
  |=========================                                                                          |  25%
| The next operator we will discuss is the 'not equals' operator represented by `!=`. Not equals tests
| whether two values are unequal, so TRUE != FALSE evaluates to TRUE. Like the equality operator, `!=` can
| also be used with numbers. Try writing an expression to see if 5 is not equal to 7.

> 5 != 7
[1] TRUE

| You are quite good my friend!
  |===========================                                                                        |  27%
| In order to negate boolean expressions you can use the NOT operator. An exclamation point `!` will cause
| !TRUE (say: not true) to evaluate to FALSE and !FALSE (say: not false) to evaluate to TRUE. Try using the
| NOT operator and the equals operator to find the opposite of whether 5 is equal to 7.

> 5 != 7
[1] TRUE

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more options.

| This expression may be a little tricky, so think about negating the expression 5 == 7 (all you need is an
| exclamation point in front).

> 5 == 7
[1] FALSE

| Not quite, but you're learning! Try again. Or, type info() for more options.

| This expression may be a little tricky, so think about negating the expression 5 == 7 (all you need is an
| exclamation point in front).

> 5 !== 7
Error: unexpected '=' in "5 !=="
> 5 != 7
[1] TRUE

| Not quite, but you're learning! Try again. Or, type info() for more options.

| This expression may be a little tricky, so think about negating the expression 5 == 7 (all you need is an
| exclamation point in front).

> 5 !== 7
Error: unexpected '=' in "5 !=="
> !5 == 7
[1] TRUE

| That's correct!
  |=============================                                                                      |  29%
| Let's take a moment to review. The equals operator `==` tests whether two boolean values or numbers are
| equal, the not equals operator `!=` tests whether two boolean values or numbers are unequal, and the NOT
| operator `!` negates logical expressions so that TRUE expressions become FALSE and FALSE expressions
| become TRUE.

...
  |===============================                                                                    |  31%
| Which of the following evaluates to FALSE?

1: !FALSE
2: 7 != 8
3: 9 < 10
4: !(0 >= -1)

Selection: 4

| You are quite good my friend!
  |=================================                                                                  |  33%
| What do you think the following expression will evaluate to?: (TRUE != FALSE) == !(6 == 7)

1: %>%
2: Can there be objective truth when programming?
3: TRUE
4: FALSE

Selection: 3

| You are quite good my friend!
  |===================================                                                                |  35%
| At some point you may need to examine relationships between multiple logical expressions. This is where
| the AND operator and the OR operator come in.

...
  |=====================================                                                              |  37%
| Let's look at how the AND operator works. There are two AND operators in R, `&` and `&&`. Both operators
| work similarly, if the right and left operands of AND are both TRUE the entire expression is TRUE,
| otherwise it is FALSE. For example, TRUE & TRUE evaluates to TRUE. Try typing FALSE & FALSE to how it is
| evaluated.

> FALSE & FALSE
[1] FALSE

| That's the answer I was looking for.
  |=======================================                                                            |  39%
| You can use the `&` operator to evaluate AND across a vector. The `&&` version of AND only evaluates the
| first member of a vector. Let's test both for practice. Type the expression TRUE & c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| Excellent work!
  |=========================================                                                          |  41%
| What happens in this case is that the left operand `TRUE` is recycled across every element in the vector
| of the right operand. This is the equivalent statement as c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).

...
  |===========================================                                                        |  43%
| Now we'll type the same expression except we'll use the `&&` operator. Type the expression TRUE && c(TRUE,
| FALSE, FALSE).

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE

| Excellent job!
  |=============================================                                                      |  45%
| In this case, the left operand is only evaluated with the first member of the right operand (the vector).
| The rest of the elements in the vector aren't evaluated at all in this expression.

...
  |===============================================                                                    |  47%
| The OR operator follows a similar set of rules. The `|` version of OR evaluates OR across an entire
| vector, while the `||` version of OR only evaluates the first member of a vector.

...
  |=================================================                                                  |  49%
| An expression using the OR operator will evaluate to TRUE if the left operand or the right operand is
| TRUE. If both are TRUE, the expression will evaluate to TRUE, however if neither are TRUE, then the
| expression will be FALSE.

...
  |==================================================                                                 |  51%
| Let's test out the vectorized version of the OR operator. Type the expression TRUE | c(TRUE, FALSE,
| FALSE).

> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE

| Keep up the great work!
  |====================================================                                               |  53%
| Now let's try out the non-vectorized version of the OR operator. Type the expression TRUE || c(TRUE,
| FALSE, FALSE).

> TRUE || c(TRUE, FALSE, FALSE)
[1] TRUE

| You're the best!
  |======================================================                                             |  55%
| Logical operators can be chained together just like arithmetic operators. The expressions: `6 != 10 &&
| FALSE && 1 >= 2` or `TRUE || 5 < 9.3 || FALSE` are perfectly normal to see.

...
  |========================================================                                           |  57%
| As you may recall, arithmetic has an order of operations and so do logical expressions. All AND operators
| are evaluated before OR operators. Let's look at an example of an ambiguous case. Type: 5 > 8 || 6 != 8 &&
| 4 > 3.9

> 5 > 8 || 6 !=8 && 4 > 3.9
[1] TRUE

| You got it!
  |==========================================================                                         |  59%
| Let's walk through the order of operations in the above case. First the left and right operands of the AND
| operator are evaluated. 6 is not equal 8, 4 is greater than 3.9, therefore both operands are TRUE so the
| resulting expression `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR operator is
| evaluated: 5 is not greater than 8 so the entire expression is reduced to FALSE || TRUE. Since the right
| operand of this expression is TRUE the entire expression evaluates to TRUE.

...
  |============================================================                                       |  61%
| Which one of the following expressions evaluates to TRUE?

1: FALSE || TRUE && FALSE
2: TRUE && 62 < 62 && 44 >= 44
3: 99.99 > 100 || 45 < 7.3 || 4 != 4.0
4: TRUE && FALSE || 9 >= 4 && 3 < 6

Selection: 4

| You are doing so well!
  |==============================================================                                     |  63%
| Which one of the following expressions evaluates to FALSE?

1: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
2: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
3: FALSE || TRUE && 6 != 4 || 9 > 4
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Selection: 1

| You're close...I can feel it! Try it again.

| Try to evaluate each expression in isolation and build up an answer.

1: 6 >= -9 && !(6 > 7) && !(!TRUE)
2: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
3: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
4: FALSE || TRUE && 6 != 4 || 9 > 4

Selection: 1

| Not quite! Try again.

| Try to evaluate each expression in isolation and build up an answer.

1: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
2: FALSE || TRUE && 6 != 4 || 9 > 4
3: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Selection: 2

| Keep trying!

| Try to evaluate each expression in isolation and build up an answer.

1: 6 >= -9 && !(6 > 7) && !(!TRUE)
2: FALSE || TRUE && 6 != 4 || 9 > 4
3: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
4: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79

Selection: 3

| You are really on a roll!
  |================================================================                                   |  65%
| Now that you're familiar with R's logical operators you can take advantage of a few functions that R
| provides for dealing with logical expressions.

...
  |==================================================================                                 |  67%
| The function isTRUE() takes one argument. If that argument evaluates to TRUE, the function will return
| TRUE. Otherwise, the function will return FALSE. Try using this function by typing: isTRUE(6 > 4)

> isTRUE(6>4)
[1] TRUE

| All that hard work is paying off!
  |====================================================================                               |  69%
| Which of the following evaluates to TRUE?

1: !isTRUE(8 != 5)
2: isTRUE(3)
3: isTRUE(!TRUE)
4: !isTRUE(4 < 3)
5: isTRUE(NA)

Selection: 4

| Perseverance, that's the answer.
  |======================================================================                             |  71%
| The function identical() will return TRUE if the two R objects passed to it as arguments are identical.
| Try out the identical() function by typing: identical('twins', 'twins')

> identical('twins', 'twins')
[1] TRUE

| You are doing so well!
  |========================================================================                           |  73%
| Which of the following evaluates to TRUE?

1: identical(4, 3.1)
2: identical(5 > 4, 3 < 3.1)
3: identical('hello', 'Hello')
4: !identical(7, 7)

Selection: 3

| Almost! Try again.

| identical() will only evaluate to TRUE if its arguments are exactly the same.

1: identical('hello', 'Hello')
2: !identical(7, 7)
3: identical(4, 3.1)
4: identical(5 > 4, 3 < 3.1)

Selection: 4

| That's correct!
  |==========================================================================                         |  75%
| You should also be aware of the xor() function, which takes two arguments. The xor() function stands for
| exclusive OR. If one argument evaluates to TRUE and one argument evaluates to FALSE, then this function
| will return TRUE, otherwise it will return FALSE. Try out the xor() function by typing: xor(5 == 6,
| !FALSE)

> ?xor
> xor(5 ==6, !FALSE)
[1] TRUE

| All that hard work is paying off!
  |============================================================================                       |  76%
| 5 == 6 evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE) evaluates to TRUE. On the other
| hand if the first argument was changed to 5 == 5 and the second argument was unchanged then both arguments
| would have been TRUE, so xor(TRUE, TRUE) would have evaluated to FALSE.

...
  |==============================================================================                     |  78%
| Which of the following evaluates to FALSE?

1: xor(4 >= 9, 8 != 8.0)
2: xor(identical(xor, 'xor'), 7 == 7.0)
3: xor(!isTRUE(TRUE), 6 > -1)
4: xor(!!TRUE, !!FALSE)

Selection: 2

| That's not exactly what I'm looking for. Try again.

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be FALSE.

1: xor(4 >= 9, 8 != 8.0)
2: xor(!isTRUE(TRUE), 6 > -1)
3: xor(!!TRUE, !!FALSE)
4: xor(identical(xor, 'xor'), 7 == 7.0)

Selection: 1

| Perseverance, that's the answer.
  |================================================================================                   |  80%
| For the next few questions, we're going to need to create a vector of integers called ints. Create this
| vector by typing: ints <- sample(10)

> ints <- sample(10)

| All that hard work is paying off!
  |==================================================================================                 |  82%
| Now simply display the contents of ints.

> ints
 [1]  8 10  5  7  1  4  9  3  2  6

| You got it!
  |===================================================================================                |  84%
| The vector `ints` is a random sampling of integers from 1 to 10 without replacement. Let's say we wanted
| to ask some logical questions about contents of ints. If we type ints > 5, we will get a logical vector
| corresponding to whether each element of ints is greater than 5. Try typing: ints > 5

> ints > 5
 [1]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE

| You got it!
  |=====================================================================================              |  86%
| We can use the resulting logical vector to ask other questions about ints. The which() function takes a
| logical vector as an argument and returns the indices of the vector that are TRUE. For example
| which(c(TRUE, FALSE, TRUE)) would return the vector c(1, 3).

...which(c(TRUE, FALSE, TRUE))
  |=======================================================================================            |  88%
| Use the which() function to find the indices of ints that are greater than 7.

> which(ints>7)
[1] 1 2 7

| You got it!
  |=========================================================================================          |  90%
| Which of the following commands would produce the indices of the elements in ints that are less than or
| equal to 2?

1: ints < 2
2: ints <= 2
3: which(ints <= 2)
4: which(ints < 2)

Selection: 3

| You got it right!
  |===========================================================================================        |  92%
| Like the which() function, the functions any() and all() take logical vectors as their argument. The any()
| function will return TRUE if one or more of the elements in the logical vector is TRUE. The all() function
| will return TRUE if every element in the logical vector is TRUE.

...
  |=============================================================================================      |  94%
| Use the any() function to see if any of the elements of ints are less than zero.

> any(ints<0)
[1] FALSE

| That's the answer I was looking for.
  |===============================================================================================    |  96%
| Use the all() function to see if all of the elements of ints are greater than zero.

> all(ints<0)
[1] FALSE

| Almost! Try again. Or, type info() for more options.

| Use the all() function on the logical vector produced by: `ints > 0`

> all(ints>0)
[1] TRUE

| Great job!
  |=================================================================================================  |  98%
| Which of the following evaluates to TRUE?

1: all(c(TRUE, FALSE, TRUE))
2: any(ints == 2.5)
3: any(ints == 10)
4: all(ints == 10)

Selection: 3

| That's a job well done!
  |===================================================================================================| 100%
| That's all for this introduction to logic in R. If you really want to see what you can do with logic,
| check out the control flow lesson!

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to get some more
| info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): rachel.harrison.gordon@gmail.com
Submission password: DNZmnyVqBf

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Logic.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 
